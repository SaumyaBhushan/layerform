// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// FileLike is an autogenerated mock type for the FileLike type
type FileLike struct {
	mock.Mock
}

type FileLike_Expecter struct {
	mock *mock.Mock
}

func (_m *FileLike) EXPECT() *FileLike_Expecter {
	return &FileLike_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: ctx, v
func (_m *FileLike) Load(ctx context.Context, v interface{}) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileLike_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type FileLike_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
//   - v interface{}
func (_e *FileLike_Expecter) Load(ctx interface{}, v interface{}) *FileLike_Load_Call {
	return &FileLike_Load_Call{Call: _e.mock.On("Load", ctx, v)}
}

func (_c *FileLike_Load_Call) Run(run func(ctx context.Context, v interface{})) *FileLike_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *FileLike_Load_Call) Return(_a0 error) *FileLike_Load_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileLike_Load_Call) RunAndReturn(run func(context.Context, interface{}) error) *FileLike_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with given fields: ctx
func (_m *FileLike) Path(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileLike_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type FileLike_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FileLike_Expecter) Path(ctx interface{}) *FileLike_Path_Call {
	return &FileLike_Path_Call{Call: _e.mock.On("Path", ctx)}
}

func (_c *FileLike_Path_Call) Run(run func(ctx context.Context)) *FileLike_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FileLike_Path_Call) Return(_a0 string, _a1 error) *FileLike_Path_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileLike_Path_Call) RunAndReturn(run func(context.Context) (string, error)) *FileLike_Path_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, v
func (_m *FileLike) Save(ctx context.Context, v interface{}) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileLike_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type FileLike_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - v interface{}
func (_e *FileLike_Expecter) Save(ctx interface{}, v interface{}) *FileLike_Save_Call {
	return &FileLike_Save_Call{Call: _e.mock.On("Save", ctx, v)}
}

func (_c *FileLike_Save_Call) Run(run func(ctx context.Context, v interface{})) *FileLike_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *FileLike_Save_Call) Return(_a0 error) *FileLike_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileLike_Save_Call) RunAndReturn(run func(context.Context, interface{}) error) *FileLike_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileLike creates a new instance of FileLike. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileLike(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileLike {
	mock := &FileLike{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
